/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Request from '../model/Request';
import Stage from '../model/Stage';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a new approval request
     * request creation may not be via rest
     * @param {Number} workflowId id of workflow
     * @param {module:model/Request} body Approval request object that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addRequestWithHttpInfo(workflowId, body) {
      let postBody = body;

      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling addRequest");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRequest");
      }


      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workflows/{workflow_id}/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new approval request
     * request creation may not be via rest
     * @param {Number} workflowId id of workflow
     * @param {module:model/Request} body Approval request object that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addRequest(workflowId, body) {
      return this.addRequestWithHttpInfo(workflowId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves approval request by given id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Request} and HTTP response
     */
    fetchRequestByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchRequestById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Request;

      return this.apiClient.callApi(
        '/requests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves approval request by given id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Request}
     */
    fetchRequestById(id) {
      return this.fetchRequestByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns stages by given request id
     * Returns stages by request id
     * @param {Number} requestId id of request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Stage>} and HTTP response
     */
    fetchRequestStagesWithHttpInfo(requestId) {
      let postBody = null;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling fetchRequestStages");
      }


      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Stage];

      return this.apiClient.callApi(
        '/requests/{request_id}/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns stages by given request id
     * Returns stages by request id
     * @param {Number} requestId id of request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Stage>}
     */
    fetchRequestStages(requestId) {
      return this.fetchRequestStagesWithHttpInfo(requestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
