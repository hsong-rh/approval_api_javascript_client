/**
 * Insights Service Approval APIs
 * APIs to query approval service
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';
import Group from '../model/Group';
import Request from '../model/Request';
import Stage from '../model/Stage';
import Template from '../model/Template';
import Workflow from '../model/Workflow';

/**
* Admins service.
* @module api/AdminsApi
* @version 1.0.0
*/
export default class AdminsApi {

    /**
    * Constructs a new AdminsApi. 
    * @alias module:api/AdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add an action
     * 
     * @param {Number} stageId id of stage
     * @param {module:model/Action} body Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addActionWithHttpInfo(stageId, body) {
      let postBody = body;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling addAction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAction");
      }


      let pathParams = {
        'stage_id': stageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/stages/{stage_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an action
     * 
     * @param {Number} stageId id of stage
     * @param {module:model/Action} body Action object that will be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAction(stageId, body) {
      return this.addActionWithHttpInfo(stageId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new approver group
     * 
     * @param {module:model/Group} body Approver group object that needs to be added to the orgnization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addGroupWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addGroup");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new approver group
     * 
     * @param {module:model/Group} body Approver group object that needs to be added to the orgnization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addGroup(body) {
      return this.addGroupWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new stage
     * 
     * @param {Number} requestId id of request
     * @param {module:model/Stage} body Stage that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addStageWithHttpInfo(requestId, body) {
      let postBody = body;

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling addStage");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStage");
      }


      let pathParams = {
        'request_id': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/requests/{request_id}/stages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new stage
     * 
     * @param {Number} requestId id of request
     * @param {module:model/Stage} body Stage that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addStage(requestId, body) {
      return this.addStageWithHttpInfo(requestId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new template to the orgnization
     * 
     * @param {module:model/Template} body Approval template object that needs to be added to the orgnization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addTemplateWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTemplate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new template to the orgnization
     * 
     * @param {module:model/Template} body Approval template object that needs to be added to the orgnization
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addTemplate(body) {
      return this.addTemplateWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new workflow
     * 
     * @param {Number} templateId id of template
     * @param {module:model/Workflow} body Workflow that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addWorkflowWithHttpInfo(templateId, body) {
      let postBody = body;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling addWorkflow");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addWorkflow");
      }


      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/templates/{template_id}/workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new workflow
     * 
     * @param {Number} templateId id of template
     * @param {module:model/Workflow} body Workflow that needs to be added
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addWorkflow(templateId, body) {
      return this.addWorkflowWithHttpInfo(templateId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finds approver action by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Action} and HTTP response
     */
    fetchActionByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchActionById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Action;

      return this.apiClient.callApi(
        '/actions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finds approver action by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Action}
     */
    fetchActionById(id) {
      return this.fetchActionByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of approver actions
     * Returns a list of approver actions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Action>} and HTTP response
     */
    fetchActionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Action];

      return this.apiClient.callApi(
        '/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of approver actions
     * Returns a list of approver actions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Action>}
     */
    fetchActions(opts) {
      return this.fetchActionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finds approver group by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
     */
    fetchGroupByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchGroupById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Group;

      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finds approver group by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
     */
    fetchGroupById(id) {
      return this.fetchGroupByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of approver groups
     * Returns a list of approver groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Group>} and HTTP response
     */
    fetchGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of approver groups
     * Returns a list of approver groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Group>}
     */
    fetchGroups(opts) {
      return this.fetchGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List approval requests
     * 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.decision fetch item by given decision (unknown, approved, denied)
     * @param {Array.<module:model/String>} opts.state fetch item by given state (pending, skipped, notified, finished)
     * @param {String} opts.requester fetch item by given requester
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Request>} and HTTP response
     */
    fetchRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'decision': this.apiClient.buildCollectionParam(opts['decision'], 'csv'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'requester': opts['requester'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Request];

      return this.apiClient.callApi(
        '/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List approval requests
     * 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.decision fetch item by given decision (unknown, approved, denied)
     * @param {Array.<module:model/String>} opts.state fetch item by given state (pending, skipped, notified, finished)
     * @param {String} opts.requester fetch item by given requester
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Request>}
     */
    fetchRequests(opts) {
      return this.fetchRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves approval stages by given id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Request} and HTTP response
     */
    fetchStageByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchStageById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Request;

      return this.apiClient.callApi(
        '/stages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieves approval stages by given id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Request}
     */
    fetchStageById(id) {
      return this.fetchStageByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List approval stages
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Stage>} and HTTP response
     */
    fetchStagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Stage];

      return this.apiClient.callApi(
        '/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List approval stages
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Stage>}
     */
    fetchStages(opts) {
      return this.fetchStagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finds template by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Template} and HTTP response
     */
    fetchTemplateByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchTemplateById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Template;

      return this.apiClient.callApi(
        '/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finds template by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    fetchTemplateById(id) {
      return this.fetchTemplateByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of workflows by given template id
     * Returns a list of workflows
     * @param {Number} templateId id of template
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Workflow>} and HTTP response
     */
    fetchTemplateWorkflowsWithHttpInfo(templateId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling fetchTemplateWorkflows");
      }


      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Workflow];

      return this.apiClient.callApi(
        '/templates/{template_id}/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of workflows by given template id
     * Returns a list of workflows
     * @param {Number} templateId id of template
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Workflow>}
     */
    fetchTemplateWorkflows(templateId, opts) {
      return this.fetchTemplateWorkflowsWithHttpInfo(templateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns list of templates
     * Returns list of templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Template} and HTTP response
     */
    fetchTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;

      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns list of templates
     * Returns list of templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Template}
     */
    fetchTemplates(opts) {
      return this.fetchTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all approval workflow by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workflow} and HTTP response
     */
    fetchWorkflowByIdWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchWorkflowById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = Workflow;

      return this.apiClient.callApi(
        '/workflows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all approval workflow by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workflow}
     */
    fetchWorkflowById(id) {
      return this.fetchWorkflowByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of all approval requests
     * Returns a list of approval requests
     * @param {Number} workflowId id of workflow
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Request>} and HTTP response
     */
    fetchWorkflowRequestsWithHttpInfo(workflowId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling fetchWorkflowRequests");
      }


      let pathParams = {
        'workflow_id': workflowId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Request];

      return this.apiClient.callApi(
        '/workflows/{workflow_id}/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List of all approval requests
     * Returns a list of approval requests
     * @param {Number} workflowId id of workflow
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Request>}
     */
    fetchWorkflowRequests(workflowId, opts) {
      return this.fetchWorkflowRequestsWithHttpInfo(workflowId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all approval workflows
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Workflow>} and HTTP response
     */
    fetchWorkflowsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = [Workflow];

      return this.apiClient.callApi(
        '/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all approval workflows
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit How many items to return at one time (max 1000) (default to 20)
     * @param {Number} opts.offset Starting Offset (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Workflow>}
     */
    fetchWorkflows(opts) {
      return this.fetchWorkflowsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete action by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeActionWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAction");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/actions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete action by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAction(id) {
      return this.removeActionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete approver group by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeGroupWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete approver group by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeGroup(id) {
      return this.removeGroupWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete approval request by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeRequestWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeRequest");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/requests/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete approval request by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeRequest(id) {
      return this.removeRequestWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete approval stage by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeStageWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeStage");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/stages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete approval stage by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeStage(id) {
      return this.removeStageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete template by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeTemplateWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete template by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeTemplate(id) {
      return this.removeTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete approval workflow by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeWorkflowWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeWorkflow");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workflows/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete approval workflow by id
     * 
     * @param {Number} id query by id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeWorkflow(id) {
      return this.removeWorkflowWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing action
     * 
     * @param {Number} id query by id
     * @param {module:model/Action} body Action object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateActionWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAction");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/actions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing action
     * 
     * @param {Number} id query by id
     * @param {module:model/Action} body Action object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateAction(id, body) {
      return this.updateActionWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing approver group
     * 
     * @param {Number} id query by id
     * @param {module:model/Group} body Approver group object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateGroupWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateGroup");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing approver group
     * 
     * @param {Number} id query by id
     * @param {module:model/Group} body Approver group object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateGroup(id, body) {
      return this.updateGroupWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing approval request status
     * 
     * @param {Number} id query by id
     * @param {module:model/Request} body new status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateRequestWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRequest");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRequest");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/requests/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing approval request status
     * 
     * @param {Number} id query by id
     * @param {module:model/Request} body new status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateRequest(id, body) {
      return this.updateRequestWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing approval stage
     * 
     * @param {Number} id query by id
     * @param {module:model/Stage} body new stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateStageWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStage");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStage");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/stages/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing approval stage
     * 
     * @param {Number} id query by id
     * @param {module:model/Stage} body new stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateStage(id, body) {
      return this.updateStageWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing template
     * 
     * @param {Number} id query by id
     * @param {module:model/Template} body Template needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateTemplateWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTemplate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTemplate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing template
     * 
     * @param {Number} id query by id
     * @param {module:model/Template} body Template needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateTemplate(id, body) {
      return this.updateTemplateWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing approval workflow
     * 
     * @param {Number} id query by id
     * @param {module:model/Workflow} body Approval workflow object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateWorkflowWithHttpInfo(id, body) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflow");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWorkflow");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['approval_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/workflows/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing approval workflow
     * 
     * @param {Number} id query by id
     * @param {module:model/Workflow} body Approval workflow object that needs to be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateWorkflow(id, body) {
      return this.updateWorkflowWithHttpInfo(id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
